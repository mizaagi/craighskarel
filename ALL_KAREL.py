"""Set up ktools."""
class ktools():
    def m(self):
        """Shorthand for move"""
        move()
    def tl(self):
        """Turn Left"""
        turn_left()
    def tr(self):
        """Turn Right"""
        self.tl()
        self.tl()
        self.tl()
    def ta(self):
        """Turn Around"""
        self.tl()
        self.tl()
    def pick(self):
        """Pick Beeper"""
        take_ball()
    def put(self):
        """Put Beeper"""
        put_ball()
    def put2(self):
        """Put 2 beepers in a line"""
        self.put()
        self.m()
        self.put()
    def put5(self):
        """Put 5 beepers in a line"""
        self.put2()
        self.m()
        self.put2()
        self.m()
        self.put()
    def h(self):
        """Print the letter 'H' using beepers."""
        self.tl()
        self.put5()
        self.tr()
        self.m()
        self.m()
        self.m()
        self.tr()
        self.put5()
        self.ta()
        self.m()
        self.m()
        self.tl()
        self.m()
        self.put2()
        self.tl()
        self.m()
        self.m()
        self.tl()
        self.m()
        self.m()
        self.m()
        self.m()
    def e(self):
        """Print the letter 'E' using beepers."""
        self.tl()
        self.put5()
        self.tr()
        self.m()
        self.put2()
        self.ta()
        self.m()
        self.m()
        self.tl()
        self.m()
        self.m()
        self.tl()
        self.m()
        self.put2()
        self.ta()
        self.m()
        self.m()
        self.tl()
        self.m()
        self.m()
        self.tl()
        self.m()
        self.put2()
        self.m()
        self.m()
    def l(self):
        """Print the letter 'L' using beepers."""
        self.tl()
        self.put5()
        self.ta()
        self.m()
        self.m()
        self.m()
        self.m()
        self.tl()
        self.m()
        self.put2()
        self.m()
        self.m()
    def o(self):
        """Print the letter 'O' using beepers."""
        self.tl()
        self.put5()
        self.tr()
        self.m()
        self.put2()
        self.m()
        self.tr()
        self.put5()
        self.tr()
        self.m()
        self.put2()
        self.ta()
        self.m()
        self.m()
        self.m()
        self.m()
    def hello(self):
        self.h()
        self.e()
        self.l()
        self.l()
        self.o()
    def arrow(self):
        self.m()
        self.put()
        self.m()
        self.m()
        self.put()
        self.m()
        self.tl()
        self.m()
        self.put()
        self.m()
        self.m()
        self.put()
        self.tl()
        self.m()
        self.tl()
        self.m()
        self.put()
        self.tr()
        self.m()
        self.tl()
        self.m()
        self.put()
        self.m()
        self.m()
        self.put()
        self.m()
        self.tl()
        self.m()
        self.put()
        self.tr()
        self.m()
        self.tl()
        self.m()
        self.put()
        self.tl()
        self.m()
        self.m()
        self.put()
        self.m()
        self.tr()
        self.m()
        self.ta()
    def arrowup_1(self):
        self.m()
        self.pick()
        self.m()
        self.m()
        self.pick()
        self.m()
        self.tl()
        self.m()
        self.pick()
        self.m()
        self.m()
        self.pick()
        self.tl()
        self.m()
        self.tl()
        self.m()
        self.pick()
        self.tr()
        self.m()
        self.tl()
        self.m()
        self.pick()
        self.m()
        self.m()
        self.pick()
        self.m()
        self.tl()
        self.m()
        self.pick()
        self.tr()
        self.m()
        self.tl()
        self.m()
        self.pick()
        self.tl()
        self.m()
        self.m()
        self.pick()
        self.m()
        self.tr()
        self.m()
    def arrowup_2(self):
        self.pick()
        self.tr()
        self.m()
        self.m()
        self.pick()
        self.tl()
        self.m()
        self.tl()
        self.m()
        self.pick()
        self.tr()
        self.m()
        self.tl()
        self.m()
        self.pick()
        self.m()
        self.tl()
        self.m()
        self.pick()
        self.tr()
        self.m()
        self.tl()
        self.m()
        self.pick()
    def goback_prog_34(self):
        self.m()
        self.m()
        self.m()
        self.m()
        self.m()
        self.tl()
        self.m()
        self.m()
        self.tl()
    def gardener(self):    
        self.ta()
        self.m()
        self.m()
        self.m()
        self.tr()
        self.m()
        self.m()
        self.m()
        self.put()
        self.tr()
        self.m()
        self.m()
        self.m()
        self.tl()
        self.m()
        self.tl()
        self.m()
        self.m()
        self.m()
        self.put()
        self.tr()
        self.m()
        self.m()
        self.m()
        self.tl()
        self.m()
        self.tl()
        self.m()
        self.m()
        self.m()
        self.put()
        self.tr()
        self.m()
        self.m()
        self.m()
        self.tl()
        self.m()
        self.tl()
        self.m()
        self.m()
        self.m()
        self.put()
        self.tr()
        self.m()
        self.m()
        self.m()
        self.tl()
        self.m()
        self.m()
        self.m()
        self.m()
    def carpet(self):
        self.put5()
        self.m()
        self.put2()
        self.m()
        self.tl()
        self.put5()
        self.m()
        self.put2()
        self.m()
        self.tl()
        self.put5()
        self.m()
        self.put2()
        self.m()
        self.tl()
        self.put5()
        self.m()
        self.put2()
        self.m()
        self.tl()
    def pRep(self):
        self.pick()
        self.m()
    def box_pickup(self):
        self.pRep()
        self.pRep()
        self.pRep()
        self.pick()
        self.tl()
        self.m()
        self.pRep()
        self.pRep()
        self.tl()
        self.pRep()
        self.pRep()
        self.pRep()
        self.tl()
        self.pRep()
        self.pRep()
        self.pick()
        self.m()
        self.tl()
    def mLetter(self):
        self.tl()
        self.put5()
        self.tr()
        self.m()
        self.tr()
        self.m()
        self.put()
        self.tl()
        self.m()
        self.tr()
        self.m()
        self.put()
        self.tl()
        self.m()
        self.tl()
        self.m()
        self.put()
        self.tr()
        self.m()
        self.tl()
        self.m()
        self.ta()
        self.put5()
        self.tl()
        self.m()
        self.m()
    def aLetter(self):
        self.tl()
        self.put5()
        self.tr()
        self.m()
        self.put2()
        self.m()
        self.put()
        self.tr()
        self.m()
        self.put2()
        self.tr()
        self.m()
        self.put2()
        self.ta()
        self.m()
        self.m()
        self.tr()
        self.m()
        self.put2()
        self.tl()
        self.m()
        self.m()
    def rLetter(self):
        self.tl()
        self.put5()
        self.tr()
        self.m()
        self.put2()
        self.m()
        self.put()
        self.tr()
        self.m()
        self.put2()
        self.tr()
        self.m()
        self.put2()
        self.ta()
        self.m()
        self.tr()
        self.m()
        self.put()
        self.tl()
        self.m()
        self.tr()
        self.m()
        self.put()
        self.tl()
        self.m()
        self.m()
    def nLetter(self):
        self.tl()
        self.put5()
        self.tr()
        self.m()
        self.tr()
        self.m()
        self.put()
        self.tl()
        self.m()
        self.tr()
        self.m()
        self.put()
        self.tl()
        self.m()
        self.tr()
        self.m()
        self.put()
        self.tl()
        self.m()
        self.tr()
        self.m()
        self.ta()
        self.put5()
    def marlon(self):
        self.mLetter()
        self.aLetter()
        self.rLetter()
        self.l()
        self.o()
        self.nLetter()
    def fic(self):
        """Front is clear."""
        return front_is_clear()
    def fib(self):
        """Front is blocked."""
        return not self.fic()
    def ric(self):
        """Right is clear."""
        self.tr()
        if self.fic():
            self.tl()
            return True
            # Immediately exits the function
        self.tl()
        return False
    def rib(self):
        """Right is blocked."""
        return not self.ric()
    def mazemove(self):
        if self.fib():
            self.tl()
        else:  # Otherwise...
            self.m()
            if self.ric():
                self.tr()
                self.m()
                if self.ric():
                    self.tr()
                    self.m()
    def k49_mm(self):
        kt.m()
        kt.m()
        kt.tl()
        kt.m()
        kt.mazemove()
        kt.m()
        kt.m()
        kt.m()
        kt.m()
        kt.mazemove()
        kt.m()
        kt.tr()
        kt.m()
        kt.tr()
        for i in range(5):
            kt.m()
        kt.tr()
        kt.m()
        kt.ta()
        kt.mazemove()
        kt.m()
        kt.tr()
        for i in range(7):
            kt.m()
        kt.tr()
        kt.m()
        kt.m()
        kt.tr()
        kt.m()
        kt.mazemove()
    def elsecode(self):
        self.tr()
        self.m()
        self.tr()
        while self.fic():
            self.m()
        self.tl()
    def lib(self):
        return left_is_blocked()
    def steeplechaser(self):
        self.tl()
        if self.rib():
            self.m()
            if self.rib():
                self.m()
                if self.rib():
                    self.m()
                    if self.rib():
                        self.m()
                    else:
                        self.elsecode()
                else:
                    self.elsecode()
            else:
                self.elsecode()
        else:
            self.elsecode()
    def ballpickup410(self):
        self.m()
        self.pick()
        self.m()
        self.pick()
        self.tl()
        self.m()
        self.pick()
        self.m()
        self.pick()
        self.tr()
        self.m()
        self.m()
        self.tr()
        self.m()
        self.pick()
        self.m()
        self.pick()
        self.tl()
        self.m()
        self.m()
        self.m()
        self.pick()
        self.m()
    def carpeting411(self):
        self.m()
        self.tl()
        self.m()
        if self.fib() and self.rib() and self.lib():
            self.put()
        else:
            pass
        self.ta()
        self.m()
        self.tl()
        # repeat this function 9 times
    def mm(self, num):
        """Move Multiple"""
        for number in range(0, num):
            self.m()
    def putm(self, num):
        """Put Multiple"""
        for i in range(num - 1):
            self.put()
            self.m()
        self.put()
    def pickm(self, num):
        """Pick Multiple"""
        for _ in range(num - 1):
            self.pick()
            self.m()
        self.pick()
    def one(self):
        self.tl()
        self.putm(5)
        self.ta()
        self.mm(4)
        self.tl()
        self.mm(2)
    def zero(self):
        self.tl()
        self.putm(5)
        self.tr()
        self.m()
        self.putm(2)
        self.tr()
        self.m()
        self.putm(4)
        self.tr()
        self.m()
        self.put()
        self.ta()
        self.mm(3)
    def onebillion(self):
        self.one()
        for i in range(9):
            self.zero()
